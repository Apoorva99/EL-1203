Fenwick tree also Binary Indexed Tree, or BIT  (for reversible function)

calculates the value of function f in the given range [l,r] (i.e. f(Al,Al+1,…,Ar)) in O(logn) 
updates in O(logn) 
requires O(N) memory

It is possible, there is a nice "trick" to do that. If you're asked to add q to every element between the l-th and the r-th, you will only call update(l,  + q) and update(r + 1,  - q), thus using 2 × O(logn) time


#include<bits/stdc++.h>
#define fast ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL)
#define f(i,a,b) for(i=a;i<b;i++)
#define fr(i,a,b) for(i=a;i>=b;i--)
#define endl '\n'
#define tst cout<<'*';
#define ll long long int
#define ff first
#define ss second
#define pb push_back
#define pf push_front
#define mod 1000000007
#define M 998244353
using namespace std;

ll bit_ar[100005];

void upd(ll i, ll val)
{
	for(;i<=n;i+=(i&(-i)))
		bit_ar[i]+=val;
}

ll sum(ll i)
{
	ll val=0;
	for(;i>0;i-=(i&(-i)))
		val+=bit_ar[i];
	return val;
}